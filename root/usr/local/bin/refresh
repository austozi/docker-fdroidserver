#!/usr/bin/with-contenv bash

APP_ROOT=/fdroid
REPO_DIR="$APP_ROOT"/repo
CONFIG_FILE="$APP_ROOT"/config.yml

# Create repo directory.
mkdir -p "$REPO_DIR"

# Work from the app root folder.
cd "$APP_ROOT"

# If config.yml is not found, create it.
if [ ! -f "$CONFIG_FILE" ]; then
	echo "fdroid: Creating config.yml..."
	echo "repo_url: $FDROID_REPO_URL
repo_name: $FDROID_REPO_NAME
repo_icon: $FDROID_REPO_ICON
repo_description: >-
  $FDROID_REPO_DESCRIPTION
keystore: keystore.p12
serverwebroot: /fdroid" >> "$CONFIG_FILE"
else
	sed -Ei "s|repo_url: .+|repo_url: $FDROID_REPO_URL|" "$CONFIG_FILE"
	sed -Ei "s|repo_name: .+|repo_name: $FDROID_REPO_NAME|" "$CONFIG_FILE"
	sed -Ei "s|repo_icon: .+|repo_icon: $FDROID_REPO_ICON|" "$CONFIG_FILE"
	sed -Ei "s|repo_description: .+|repo_description: $FDROID_REPO_DESCRIPTION|" "$CONFIG_FILE"
fi

# Fix permissions to get rid of warning.
chmod 0600 "$CONFIG_FILE"

# Initialise the repo.
echo "fdroid: Attempting to initialise repo..."
fdroid init --no-prompt --quiet &> /dev/null || \
	echo "fdroid: Initialisation did not succeed. The repo probably already exists."

# Deploy the servier.
echo "fdroid: Attempting to deploy server..."
fdroid deploy -v &> /dev/null || \
	echo "fdroid: Deployment did not succeed. The server probably has already been deployed."

# Create key if not present.
if [ ! -f "/$APP_ROOT"/keystore.p12 ]; then
	echo "fdroid: Generating key..."
	fdroid update --create-key --quiet &> /dev/null || \
		echo "fdroid: Could not generate key. Proceeding anyway..."
fi

# Download APKs.
# Place download scripts (*.sh) in a folder mapped to /custom-cont-init.d.
UPDATES_DIR=/custom-cont-init.d
if [ -d $UPDATES_DIR ]; then
	for i in $UPDATES_DIR/*.sh; do
		bash "$i"
	done
fi

# Update APK indices.
echo "fdroid: Updating repo..."

# Print verbose message for troubleshooting.
fdroid update -cv || echo "fdroid: Update did not succeed."
